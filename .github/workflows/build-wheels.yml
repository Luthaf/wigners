name: Build Python wheels

on:
  push:
    branches: [master]
    tags: ["*"]
  pull_request:
    # Check all PR

jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: x86_64 Linux
            os: ubuntu-22.04
            rust-target: x86_64-unknown-linux-gnu
            cibw-arch: x86_64
          - name: arm64 Linux
            os: ubuntu-22.04-arm
            rust-target: aarch64-unknown-linux-gnu
            cibw-arch: aarch64
          - name: x86_64 macOS
            os: macos-13
            rust-target: x86_64-apple-darwin
            cibw-arch: x86_64
          - name: M1 macOS
            os: macos-14
            rust-target: aarch64-apple-darwin
            cibw-arch: arm64
          - name: x86_64 Windows
            os: windows-2022
            rust-target: x86_64-pc-windows-msvc
            cibw-arch: AMD64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: setup rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.rust-target }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: install dependencies
        run: python -m pip install cibuildwheel twine

      - name: build manylinux with rust docker image
        if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-22.04-arm'
        run: docker build -t rustc-manylinux2014_${{ matrix.cibw-arch }} python/scripts/rustc-manylinux2014_${{ matrix.cibw-arch }}

      - name: build wheel
        run: python -m cibuildwheel .
        env:
          CIBW_BUILD: cp312-*
          CIBW_SKIP: "*musllinux*"
          CIBW_ARCHS: ${{ matrix.cibw-arch }}
          CIBW_BUILD_VERBOSITY: 1
          CIBW_MANYLINUX_X86_64_IMAGE: rustc-manylinux2014_x86_64
          CIBW_MANYLINUX_AARCH64_IMAGE: rustc-manylinux2014_aarch64
          CIBW_ENVIRONMENT: >
            MACOSX_DEPLOYMENT_TARGET=11

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.cibw-arch }}
          path: ./wheelhouse/*.whl

  build-sdist:
    runs-on: ubuntu-22.04
    name: sdist
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: build sdist
        run: |
          pip install build
          python -m build --sdist .
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  merge-and-release:
    name: Merge and release wheels/sdists
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: wheels
          pattern: wheel-*
          merge-multiple: true

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          path: wheels
          name: sdist

      - name: Re-upload a single wheels artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: |
            wheels/*

      - name: Comment with download link
        uses: PicoCentauri/comment-artifact@v1
        if: github.event.pull_request.head.repo.fork == false
        with:
          name: wheels
          description: ⚙️ Download Python wheels for this pull-request (you can install these with pip)

      - name: upload to GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            wheels/wigners-*
          prerelease: ${{ contains(github.ref, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
